/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SetupIndexImport } from './routes/setup/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as SetupOrganizationImport } from './routes/setup/organization'
import { Route as SetupAdminImport } from './routes/setup/admin'
import { Route as AdminSpecialtyImport } from './routes/admin/specialty'
import { Route as AdminResultImport } from './routes/admin/result'
import { Route as AdminProgramImport } from './routes/admin/program'
import { Route as AdminEmployeeImport } from './routes/admin/employee'
import { Route as AdminAssignmentImport } from './routes/admin/assignment'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SetupIndexRoute = SetupIndexImport.update({
  path: '/setup/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const SetupOrganizationRoute = SetupOrganizationImport.update({
  path: '/setup/organization',
  getParentRoute: () => rootRoute,
} as any)

const SetupAdminRoute = SetupAdminImport.update({
  path: '/setup/admin',
  getParentRoute: () => rootRoute,
} as any)

const AdminSpecialtyRoute = AdminSpecialtyImport.update({
  path: '/admin/specialty',
  getParentRoute: () => rootRoute,
} as any)

const AdminResultRoute = AdminResultImport.update({
  path: '/admin/result',
  getParentRoute: () => rootRoute,
} as any)

const AdminProgramRoute = AdminProgramImport.update({
  path: '/admin/program',
  getParentRoute: () => rootRoute,
} as any)

const AdminEmployeeRoute = AdminEmployeeImport.update({
  path: '/admin/employee',
  getParentRoute: () => rootRoute,
} as any)

const AdminAssignmentRoute = AdminAssignmentImport.update({
  path: '/admin/assignment',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/assignment': {
      id: '/admin/assignment'
      path: '/admin/assignment'
      fullPath: '/admin/assignment'
      preLoaderRoute: typeof AdminAssignmentImport
      parentRoute: typeof rootRoute
    }
    '/admin/employee': {
      id: '/admin/employee'
      path: '/admin/employee'
      fullPath: '/admin/employee'
      preLoaderRoute: typeof AdminEmployeeImport
      parentRoute: typeof rootRoute
    }
    '/admin/program': {
      id: '/admin/program'
      path: '/admin/program'
      fullPath: '/admin/program'
      preLoaderRoute: typeof AdminProgramImport
      parentRoute: typeof rootRoute
    }
    '/admin/result': {
      id: '/admin/result'
      path: '/admin/result'
      fullPath: '/admin/result'
      preLoaderRoute: typeof AdminResultImport
      parentRoute: typeof rootRoute
    }
    '/admin/specialty': {
      id: '/admin/specialty'
      path: '/admin/specialty'
      fullPath: '/admin/specialty'
      preLoaderRoute: typeof AdminSpecialtyImport
      parentRoute: typeof rootRoute
    }
    '/setup/admin': {
      id: '/setup/admin'
      path: '/setup/admin'
      fullPath: '/setup/admin'
      preLoaderRoute: typeof SetupAdminImport
      parentRoute: typeof rootRoute
    }
    '/setup/organization': {
      id: '/setup/organization'
      path: '/setup/organization'
      fullPath: '/setup/organization'
      preLoaderRoute: typeof SetupOrganizationImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/setup/': {
      id: '/setup/'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AdminAssignmentRoute,
  AdminEmployeeRoute,
  AdminProgramRoute,
  AdminResultRoute,
  AdminSpecialtyRoute,
  SetupAdminRoute,
  SetupOrganizationRoute,
  AdminIndexRoute,
  SetupIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin/assignment",
        "/admin/employee",
        "/admin/program",
        "/admin/result",
        "/admin/specialty",
        "/setup/admin",
        "/setup/organization",
        "/admin/",
        "/setup/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin/assignment": {
      "filePath": "admin/assignment.tsx"
    },
    "/admin/employee": {
      "filePath": "admin/employee.tsx"
    },
    "/admin/program": {
      "filePath": "admin/program.tsx"
    },
    "/admin/result": {
      "filePath": "admin/result.tsx"
    },
    "/admin/specialty": {
      "filePath": "admin/specialty.tsx"
    },
    "/setup/admin": {
      "filePath": "setup/admin.tsx"
    },
    "/setup/organization": {
      "filePath": "setup/organization.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/setup/": {
      "filePath": "setup/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
